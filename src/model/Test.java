package model;

import java.io.PrintWriter;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.PriorityQueue;

public class Test implements Serializable {

	private static final long serialVersionUID = -795931782953363826L; // auto-generated by serializable
	private static int idGen = 10;
	private PriorityQueue<A_Question> questionsQueue;
	private int numOfQuestions;
	private int wantedNumOfQuestions;
	private int testId;

	public Test(int num) {
		questionsQueue = new PriorityQueue<A_Question>((A_Question a, A_Question b) -> {
			if (a.getAnswerLength() > b.getAnswerLength()) {
				return 1;
			} else {
				return -1;
			}
		});
		numOfQuestions = 0;
		wantedNumOfQuestions = num;
		testId = idGen++;
	}

	public Test(Test test) {
		this.questionsQueue = test.getQuestionsQueue();
		this.numOfQuestions = test.getNumOfQuestions();
		this.wantedNumOfQuestions = test.getWantedNumOfQuestions();
		this.testId = test.testId;
	}

	public Test() {
	}

	public ArrayList<A_Question> getTestQuestions() {
		return new ArrayList<A_Question>(questionsQueue);
	}

	public int getId() {
		return testId;
	}

	public void setIdGen(int num) {
		idGen = num + 1;
	}

	public void setId(int id) {
		this.testId = id;
	}

	public int getNumOfQuestions() {
		return numOfQuestions;
	}

	public void setNumOfQuestions(int num) {
		numOfQuestions = num;
	}

	public void setWantedNumOfQuestion(int num) {
		wantedNumOfQuestions = num;
	}

	public PriorityQueue<A_Question> getQuestionsQueue() {
		return this.questionsQueue;
	}

	/* add a question to the array */
	public boolean addQuestion(A_Question question) throws IndexOutOfBoundsException {
		if (numOfQuestions == wantedNumOfQuestions) // check if array is full
			return false;
		if (questionsQueue.contains(question))
			return false;

		questionsQueue.add(question);
		numOfQuestions++;
		return true;
	}

	public String toStringWithAnswer() throws IndexOutOfBoundsException { // with full answers
		StringBuffer sb = new StringBuffer();
		PriorityQueue<A_Question> tmpQueue = new PriorityQueue<A_Question>(questionsQueue);

		for (int i = 0; i < numOfQuestions; i++) {
			A_Question tmpQuestion = tmpQueue.poll();
			sb.append((i + 1) + ". " + tmpQuestion.toStringForTest() + "\n\n\t The correct answer is: ");
			if (tmpQuestion.getClass().equals(MultiChoiceQuestion.class)) {
				for (int j = 0; j < ((MultiChoiceQuestion) tmpQuestion).getNumOfAnswers(); j++) {
					if (((MultiChoiceQuestion) tmpQuestion).getAnswers().get(j).getIsTrue()) {
						sb.append(((MultiChoiceQuestion) tmpQuestion).getAnswers().get(j).getAnswer());
						j = ((MultiChoiceQuestion) tmpQuestion).getNumOfAnswers();
					}
				}
			} else {
				sb.append(((OpenQuestion) tmpQuestion).getAnswer().getAnswer());
			}

			sb.append("\n ------------------------------ \n");
		}
		return sb.toString();
	}


	public int getWantedNumOfQuestions() {
		return wantedNumOfQuestions;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Test other = (Test) obj;
		return Objects.equals(questionsQueue, other.questionsQueue);
	}

	@Override
	public String toString() throws IndexOutOfBoundsException {
		StringBuffer sb = new StringBuffer();
		PriorityQueue<A_Question> tmpQueue = new PriorityQueue<>(questionsQueue);
		for (int i = 0; i < numOfQuestions; i++) {
			A_Question tmpQuestion = tmpQueue.poll();
			sb.append((i + 1) + ". " + tmpQuestion.toStringForTest() + "\n ------------------------------ \n");
		}
		return sb.toString();
	}

	public void save(PrintWriter pw) {
		pw.print(toString());
	}

	public void saveWithAnswers(PrintWriter pw) {
		pw.print(toStringWithAnswer());
	}

	public void setQuestions(List<A_Question> list) {
		questionsQueue = new PriorityQueue<A_Question>((A_Question a, A_Question b) -> {
			if (a.getAnswerLength() > b.getAnswerLength()) {
				return 1;
			} else {
				return -1;
			}
		});
		questionsQueue.addAll(list);
		numOfQuestions = questionsQueue.size();
	}

}
